from pydantic import BaseModel, Field
from langchain_aws import ChatBedrock
from langchain import hub
import logging, json
from typing import Literal
from langchain_core.tools import tool
from langchain.agents import AgentExecutor, create_tool_calling_agent
from aind_data_access_api.document_db import MetadataDbClient
from typing import List, Optional
from typing_extensions import TypedDict
from pprint import pprint 

logging.basicConfig(filename='agentic_graph.log', level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', filemode="w")

MODEL_ID = "anthropic.claude-3-sonnet-20240229-v1:0"
LLM = ChatBedrock(
    model_id= MODEL_ID,
    model_kwargs= {
        "temperature": 0
    }
)


API_GATEWAY_HOST = "api.allenneuraldynamics-test.org"
DATABASE = "metadata_vector_index"
COLLECTION = "curated_assets"

docdb_api_client = MetadataDbClient(
   host=API_GATEWAY_HOST,
   database=DATABASE,
   collection=COLLECTION,
)

@tool
def aggregation_retrieval(agg_pipeline: list) -> list:
    """Given a MongoDB query and list of projections, this function retrieves and returns the 
    relevant information in the documents. 
    Use a project stage as the first stage to minimize the size of the queries before proceeding with the remaining steps.
    The input to $map must be an array not a string, avoid using it in the $project stage.

    Parameters
    ----------
    agg_pipeline
        MongoDB aggregation pipeline

    Returns
    -------
    list
        List of retrieved documents
    """

    result = docdb_api_client.aggregate_docdb_records(
        pipeline=agg_pipeline
    )
    return result
        
tools = [aggregation_retrieval]
prompt = hub.pull("eden19/entire_db_retrieval")

llm_with_tools = LLM.bind_tools(tools)

db_surveyor_agent = create_tool_calling_agent(LLM, tools, prompt)
db_surveyor = AgentExecutor(agent=db_surveyor_agent, tools=tools, return_intermediate_steps =  True, verbose=False)

# class retrieve_aggregation(BaseModel):
#     """List of results retrieved from mongodb database after applying pipeline generated by the model"""

#     mongo_db_query: str = Field(
#         description="Aggregation pipeline used to retrieve information from database"
#     )
#     mongo_db_results: list= Field(
#         description="List of information retrieved from the database after applying aggregation pipeline"
#     )


# aggregation_retriever = llm_with_tools.with_structured_output(retrieve_aggregation)

# aggregation_retriever_chain = prompt | aggregation_retriever
#pprint(db_surveyor.invoke({'chat_history': [],"query": "what are the unique modalities in the database", 'agent_scratchpad': []})['intermediate_steps'][0][1])

import importlib
agentic_graph = importlib.import_module('metadata_chatbot.agents.agentic_graph')
#print(dir(agentic_graph))


def generate_for_whole_db():
    """
    Filter database
    
    Args:
        state (dict): The current graph state

    Returns:
        state (dict): New key may be added to state, generation, which contains the answer for query asked
    """

    query = "What are the names of the assets using mouse 675387"
    chat_history = []

    logging.info("Generating answer...")

    documents_dict = db_surveyor.invoke({'query': query, 'chat_history': chat_history, 'agent_scratchpad': []})
    documents = documents_dict['output'][0]['text']
    print(documents)
    #documents = "\n\n".join(documents_list)

#generate_for_whole_db()

API_GATEWAY_HOST = "api.allenneuraldynamics-test.org"
DATABASE = "metadata_vector_index"
COLLECTION = "curated_assets"

from aind_data_access_api.document_db import MetadataDbClient

docdb_api_client = MetadataDbClient(
   host=API_GATEWAY_HOST,
   database=DATABASE,
   collection=COLLECTION,
)


agg_pipeline = [{'$count': '_id'}]

def aggregation_retrieval(agg_pipeline: list) -> list:
    """Given a MongoDB query and list of projections, this function retrieves and returns the 
    relevant information in the documents. 
    Use a project stage as the first stage to minimize the size of the queries before proceeding with the remaining steps.
    The input to $map must be an array not a string, avoid using it in the $project stage.

    Parameters
    ----------
    agg_pipeline
        MongoDB aggregation pipeline

    Returns
    -------
    list
        List of retrieved documents
    """

    result = docdb_api_client.aggregate_docdb_records(
        pipeline=agg_pipeline
    )
    return result


